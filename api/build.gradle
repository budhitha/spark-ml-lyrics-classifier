buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'org.springframework.boot'

configurations.all {
    resolutionStrategy {
        force "org.codehaus.janino:janino:$sparkJaninoVersion"
        force "org.codehaus.janino:commons-compiler:$sparkJaninoVersion"
        force "com.fasterxml.jackson.core:jackson-core:$sparkJacksonVersion"
        force "com.fasterxml.jackson.core:jackson-databind:$sparkJacksonVersion"
    }
}

dependencies {
    compile project(':spark-driver')

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude module: 'spring-boot-starter-logging'
    }

    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile("org.slf4j:slf4j-api:$slf4jVersion")
    compile("ch.qos.logback:logback-classic:$logbackVersion")

    testCompile("junit:junit:$junitVersion")
    testCompile("org.springframework:spring-test:$springFrameworkVersion")
}

task buildReact(type: Exec) {
    workingDir "$projectDir/../client" // Change if your React project is elsewhere
    commandLine "npm", "install"
    commandLine "npm", "run", "build"
}

clean {
    delete 'src/main/resources/static/*'
}

task copyFrontend(type: Copy) {
    dependsOn buildReact
    from '../client/dist' // Source: Vite output folder
    into 'src/main/resources/static' // Destination: Backend static folder
}

import org.gradle.internal.os.OperatingSystem

task openBrowser {
    doLast {
        def url = 'http://localhost:9090'

        if (OperatingSystem.current().isWindows()) {
            exec {
                commandLine 'cmd', '/c', 'start', url
            }
        } else if (OperatingSystem.current().isMacOsX()) {
            exec {
                commandLine 'open', url
            }
        } else if (OperatingSystem.current().isLinux()) {
            exec {
                commandLine 'xdg-open', url
            }
        }
    }
}

processResources.dependsOn copyFrontend
processResources.dependsOn openBrowser

